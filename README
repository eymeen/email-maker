email-generator

Generate multiple work emails from only one email. It works because most mailers ignores dots written in the emails. Playing on this glitch, system users can randomly insert dots inside the email, keeping it correct, to create multiple email variations from a single one. I created this repo to prevent this from happening on your system. Use the class, github page, or the simple function to get all of the possible variations and add the unstructions on your system.

tested on:
- gmail.com

AGAIN do not use this repo to randomly create accounts on systems.

docs:
===============================================================================
Email Generator Class üë®‚Äçüíª
===============================================================================

**Constructor**
- `constructor(input = null)`: Creates an instance of the `EmailGenerator` class.
  - **Parameters:**
    - `input` (optional): The email address or username to generate variations from.

===============================================================================

**Methods**

- `generateUsernameVariations(current, remaining)`: Generates different username variations based on the provided `current` and `remaining` characters.

- `getEmailVariations(type = "arr")`: Gets the generated variations in different formats.
  - **Parameters:**
    - `type` (optional): Output format. Default is an array (`"arr"`). Other options include `"object"` or a custom separator.

- `logVariations(type = "arr")`: Logs the generated variations to the console.
  - **Parameters:**
    - `type` (optional): Log format. Default is an array (`"arr"`). Other options include `"object"` or a custom separator.

- `tableVariations()`: Displays the generated variations in a table format in the console.

- `download(side = "backend")`: Downloads the generated variations. Supports both backend (Node.js) and frontend (browser) environments.
  - **Parameters:**
    - `side`: Download side. Default is `"backend"`. Use `"frontend"` for browser-side downloads.

- `fsDownload()`: Downloads the variations to the local file system (Node.js environment).

- `blobDownload()`: Downloads the variations as a text file in the browser.

- `validateInput(input)`: Validates the input for a valid email address or username.

**Arithmetic Methods**
- `countUsernameVariations()`: Counts the variations based on the username length.

- `getEmailCharsCount(variationCount)`: Calculates the number of characters needed to represent the given number of variations.

- `getVariationsCount(emailChars)`: Calculates the number of variations based on the number of characters.

===============================================================================

**Usage Example**

```javascript
import EmailGenerator from "../GenerateEmail";


const emails = new EmailGenerator("example@email.com");

emails.logVariations();
emails.download();
```

This example creates an instance of the `EmailGenerator` class, generates variations, logs them, displays them in a table, and downloads them using the default backend download option.

Enjoy it! üöÄ
